{
	"info": {
		"_postman_id": "7fca50fe-3e05-461f-a38c-9c7074a4bbcd",
		"name": "1R-ShipmentRecord",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38369508",
		"_collection_link": "https://one-record-1456.postman.co/workspace/f7492b3a-9cd2-47b9-8592-6ba740e9355a/collection/38369508-7fca50fe-3e05-461f-a38c-9c7074a4bbcd?action=share&source=collection_link&creator=38369508"
	},
	"item": [
		{
			"name": "Change totalGrossWeight",
			"item": [
				{
					"name": "Create ShipmentRecord",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define a function to generate a random 8-digit number",
									"function generateRandomNumber() {",
									"    return Math.floor(10000000 + Math.random() * 90000000).toString();",
									"}",
									"",
									"// Set random MAWB number",
									"pm.collectionVariables.set(\"mawb-prefix\", \"020\");",
									"pm.collectionVariables.set(\"mawb-number\", generateRandomNumber());",
									"pm.collectionVariables.set(\"arrival-Location\", \"PVG\");",
									"pm.collectionVariables.set(\"departure-Location\", \"HAJ\");",
									"pm.collectionVariables.set(\"Consignor Company Name\", \"CompanyName\");",
									"pm.collectionVariables.set(\"Current Date\", \"2023-01-18T00:00:00\");",
									"pm.collectionVariables.set(\"Carrier City Name\", \"CityName1\");",
									"pm.collectionVariables.set(\"Shipment Gross Weight\", \"600\");",
									"pm.collectionVariables.set(\"Shipment Volume\", \"1\");",
									"pm.collectionVariables.set(\"Shipment goods description\", \"PARTS FOR GRAB ACCESSORIES NOT RESTRICTED\");",
									"pm.collectionVariables.set(\"Handling Instructions\", \"Marks: Address Att. docs: Commercial invoice References: AB67713\");",
									"pm.collectionVariables.set(\"Height-Piece1\", \"95\");",
									"pm.collectionVariables.set(\"Lenght-Piece1\", \"140\");",
									"pm.collectionVariables.set(\"Volume-Piece1\", \"1.20\");",
									"pm.collectionVariables.set(\"Width-Piece1\", \"90\");",
									"pm.collectionVariables.set(\"NvdForCarriageTrue\", \"True\");",
									"pm.collectionVariables.set(\"Prepaid Payment Type\", \"P\");",
									"pm.collectionVariables.set(\"Due-Carrier\", \"C\");",
									"pm.collectionVariables.set(\"GEN Accounting Identifier\", \"GEN\");",
									"pm.collectionVariables.set(\"iterationNumber\", \"000001\");",
									"pm.collectionVariables.set(\"customsCode\", \"X\");",
									"pm.collectionVariables.set(\"Due-Carrier\", \"C\");",
									"",
									"// Get token using Client Credentials grant type",
									"pm.sendRequest({",
									"    url: \"http://localhost:8989\" + \"/realms/neone/protocol/openid-connect/token\",",
									"    method: \"POST\",",
									"    header: {",
									"        \"Accept\": \"application/json\",",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"",
									"    },",
									"    body: {",
									"        mode: \"urlencoded\",",
									"        urlencoded: [",
									"            { key: \"grant_type\", value: \"client_credentials\" },",
									"            { key: \"client_id\", value: \"neone-client\" },",
									"            { key: \"client_secret\", value: \"lx7ThS5aYggdsMm42BP3wMrVqKm9WpNY\" }",
									"        ]",
									"    }",
									"}, (err, res) => {",
									"    if (err) {",
									"        console.log(\"Token request failed:\", err);",
									"    } else {",
									"        // Set the access token",
									"        pm.collectionVariables.set(\"BEARERTOKEN\", res.json().access_token);",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP Status Code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Validate response contains the 'Location' header",
									"pm.test(\"Response has 'Location' header\", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"// Extract 'Location' header and store it in an environment variable",
									"let locationHeader = pm.response.headers.get(\"Location\");",
									"",
									"if (locationHeader) {",
									"    pm.collectionVariables.set(\"shipmentRecord\", locationHeader);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n  \"@context\": {\n\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n\n  },\n\n  \"@id\": \"http://localhost:8080/logistics-objects/waybill-{{mawb-prefix}}-{{mawb-number}}\",\n\n  \"@type\": \"cargo:Waybill\",\n\n  \"cargo:waybillType\": {\n\n    \"@id\": \"https://onerecord.iata.org/ns/cargo#MASTER\"\n\n  },\n\n  \"cargo:waybillPrefix\": \"{{mawb-prefix}}\",\n\n  \"cargo:waybillNumber\": \"{{mawb-number}}\",\n\n  \"cargo:customsOriginCode\": \"{{customsCode}}\",\n\n  \"cargo:arrivalLocation\": \"{{arrival-Location}}\",\n\n  \"cargo:departureLocation\": \"{{departure-Location}}\",\n\n  \"cargo:consignorDeclarationSignature\": \"{{Consignor Company Name}}\",\n\n  \"cargo:carrierDeclarationDate\": \"{{Current Date}}\",\n\n  \"cargo:carrierDeclarationSignature\": \"PersonName1\",\n\n  \"cargo:carrierDeclarationPlace\": {\n\n    \"@id\": \"http://localhost:8080/logistics-objects/Location4-{{mawb-prefix}}-{{mawb-number}}\",\n\n    \"@type\": \"cargo:Location\",\n\n    \"cargo:Address\": {\n\n      \"cargo:country\": \"DE\",\n\n      \"cargo:cityCode\": {\n\n        \"cargo:codeDescription\": \"Guiness23\"\n\n      },\n\n      \"cargo:postalCode\": \"38259\",\n\n      \"cargo:regionCode\": \"MN\",\n\n      \"cargo:postOfficeBox\": \"\",\n\n      \"cargo:streetAdressLines\": \"Dublin Convention Center \",\n\n      \"cargo:contactPersons\": {\n\n        \"cargo:contactDetail\": [\n\n          {\n\n            \"cargo:contactDetailType\": \"PHONE_NUMBER\",\n\n            \"cargo:textualValue\": \"009983222\"\n\n          },\n\n          {\n\n            \"cargo:contactDetailType\": \"FAX_NUMBER\",\n\n            \"cargo:textualValue\": \"733222\"\n\n          }\n\n        ]\n\n      }\n\n    }\n\n  },\n\n  \"cargo:referredBookingOption\": {\n\n    \"@id\": \"http://localhost:8080/logistics-objects/referredBookingOption-{{mawb-prefix}}-{{mawb-number}}\",\n\n    \"@type\": \"cargo:booking\",\n\n    \"cargo:waybillNumber\": \"{{mawb-number}}\",\n\n    \"cargo:waybillPrefix\": \"{{mawb-prefix}}\",\n\n    \"cargo:bookingStatus\": \"CONFIRMED\",\n\n    \"cargo:updateBookingOptionRequest\": {\n\n      \"@id\": \"http://localhost:8080/logistics-objects/updateBookingOptionRequest-{{mawb-prefix}}-{{mawb-number}}\",\n\n      \"@type\": \"cargo:updateBookingOptionRequest\",\n\n      \"cargo:bookingShipmentDetails\": {\n\n        \"@type\": \"cargo:BookingShipment\",\n\n        \"@id\": \"http://localhost:8080/logistics-objects/bookingShipmentDetail-{{mawb-prefix}}-{{mawb-number}}\",\n\n        \"cargo:expectedCommodity\": \"SPARE\"\n\n      }\n\n    }\n\n  },\n\n  \"cargo:involvedParties\": [\n\n    {\n\n      \"@id\": \"http://localhost:8080/logistics-objects/Party-{{mawb-prefix}}-{{mawb-number}}\",\n\n      \"@type\": \"cargo:Party\",\n\n      \"cargo:partyRole\": \"CONSIGNEE\",\n\n      \"cargo:partyDetails\": {\n\n        \"cargo:name\": \"CompanyName3\",\n\n        \"cargo:basedAtLocation\": {\n\n          \"@id\": \"http://localhost:8080/logistics-objects/Location1-{{mawb-prefix}}-{{mawb-number}}\",\n\n          \"@type\": \"cargo:Location\",\n\n          \"cargo:Address\": {\n\n            \"cargo:country\": \"CN\",\n\n            \"cargo:cityCode\": {\n\n              \"cargo:codeDescription\": \"CityName2\"\n\n            },\n\n            \"cargo:postalCode\": \"201207\",\n\n            \"cargo:regionCode\": \"NY\",\n\n            \"cargo:postOfficeBox\": \"\",\n\n            \"cargo:streetAdressLines\": \"B616, No.1333 Wenju Road\",\n\n            \"cargo:contactPersons\": {\n\n              \"cargo:contactDetail\": {\n\n                \"cargo:contactDetailType\": \"PHONE_NUMBER\",\n\n                \"cargo:textualValue\": \"8613801676243\"\n\n              }\n\n            }\n\n          }\n\n        }\n\n      }\n\n    },\n\n    {\n\n      \"@id\": \"http://localhost:8080/logistics-objects/Consignor-{{mawb-prefix}}-{{mawb-number}}\",\n\n      \"@type\": \"cargo:Party\",\n\n      \"cargo:partyRole\": \"CONSIGNOR\",\n\n      \"cargo:partyDetails\": {\n\n        \"cargo:name\": \"CompanyName3\",\n\n        \"cargo:basedAtLocation\": {\n\n          \"@id\": \"http://localhost:8080/logistics-objects/Location2-{{mawb-prefix}}-{{mawb-number}}\",\n\n          \"@type\": \"cargo:Location\",\n\n          \"cargo:Address\": {\n\n            \"cargo:country\": \"CN\",\n\n            \"cargo:cityCode\": {\n\n              \"cargo:codeDescription\": \"CityName2\"\n\n            },\n\n            \"cargo:postalCode\": \"201207\",\n\n            \"cargo:regionCode\": \"NY\",\n\n            \"cargo:postOfficeBox\": \"\",\n\n            \"cargo:streetAdressLines\": \"Windm&#252;hlenbergstr. 20- 22\",\n\n            \"cargo:contactPersons\": {\n\n              \"cargo:contactDetail\": [\n\n                {\n\n                  \"cargo:contactDetailType\": \"PHONE_NUMBER\",\n\n                  \"cargo:textualValue\": \"4953413020\"\n\n                },\n\n                {\n\n                  \"cargo:contactDetailType\": \"FAX_NUMBER\",\n\n                  \"cargo:textualValue\": \"495341302424\"\n\n                }\n\n              ]\n\n            }\n\n          }\n\n        }\n\n      }\n\n    },\n\n    {\n\n      \"@id\": \"http://localhost:8080/logistics-objects/Forwarder-{{mawb-prefix}}-{{mawb-number}}\",\n\n      \"@type\": \"cargo:Party\",\n\n      \"cargo:partyRole\": \"FREIGHT FORWARDER\",\n\n      \"cargo:partyDetails\": {\n\n        \"cargo:name\": \"CompanyName2\",\n\n        \"cargo:basedAtLocation\": {\n\n          \"@id\": \"http://localhost:8080/logistics-objects/Location1-{{mawb-prefix}}-{{mawb-number}}\",\n\n          \"@type\": \"cargo:Location\",\n\n          \"cargo:Address\": {\n\n            \"cargo:country\": \"DE\",\n\n            \"cargo:cityCode\": {\n\n              \"cargo:codeDescription\": \"CityName2\"\n\n            },\n\n            \"cargo:postalCode\": \"38259\",\n\n            \"cargo:regionCode\": \"HE\",\n\n            \"cargo:postOfficeBox\": \"\",\n\n            \"cargo:streetAdressLines\": \"Windm&#252;hlenbergstr. 20- 22\",\n\n            \"cargo:contactPersons\": {\n\n              \"cargo:contactDetail\": [\n\n                {\n\n                  \"cargo:contactDetailType\": \"PHONE_NUMBER\",\n\n                  \"cargo:textualValue\": \"087388432\"\n\n                },\n\n                {\n\n                  \"cargo:contactDetailType\": \"FAX_NUMBER\",\n\n                  \"cargo:textualValue\": \"740013442\"\n\n                }\n\n              ]\n\n            }\n\n          }\n\n        }\n\n      }\n\n    }\n\n  ],\n\n  \"cargo:shipment\": [\n\n    {\n\n      \"@id\": \"http://localhost:8080/logistics-objects/shipment-{{mawb-prefix}}-{{mawb-number}}\",\n\n      \"@type\": \"cargo:Shipment\",\n\n      \"cargo:totalGrossWeight\": \"{{Shipment Gross Weight}}\",\n\n      \"cargo:totalDimension\": {\n\n        \"cargo:volume\": \"{{Shipment Volume}}\"\n\n      },\n\n      \"cargo:goodsDescription\": \"{{Shipment goods description}}\",\n\n      \"cargo:textualHandlingInstructions\": \"[[{{Handling Instructions}}]]\",\n\n      \"cargo:pieces\": [\n\n        {\n\n          \"@id\": \"http://localhost:8080/logistics-objects/pieces-{{mawb-prefix}}-{{mawb-number}}\",\n\n          \"@type\": \"cargo:Piece\",\n\n          \"cargo:dimension\": {\n\n            \"cargo:height\": \"{{Height-Piece1}}\",\n\n            \"cargo:lenght\": \"{{Lenght-Piece1}}\",\n\n            \"cargo:width\": \"{{Width-Piece1}}\",\n\n            \"cargo:volume\": \"{{Volume-Piece1}}\"\n\n          },\n\n          \"cargo:grossWeight\": \"600\",\n\n          \"cargo:volumetricWeight\": {\n\n            \"cargo:chargeableWeight\": \"600\"\n\n          },\n\n          \"cargo:ndvForCarriage\": \"{{NvdForCarriageTrue}}\",\n\n          \"cargo:nvdForCustoms\": \"{{NvdForCustomsTrue}}\"\n\n        }\n\n      ],\n\n      \"cargo:customsInformation\": [\n\n        {\n\n          \"@id\": \"http://localhost:8080/logistics-objects/customsInfo-{{mawb-prefix}}-{{mawb-number}}\",\n\n          \"@type\": \"cargo:CustomsInfo\",\n\n          \"cargo:contentCode\": \"CP\",\n\n          \"cargo:subjectCode\": \"CNE\",\n\n          \"cargo:country\": \"CN\",\n\n          \"cargo:otherCustomsInformation\": \"PersonName2\"\n\n        }\n\n      ]\n\n    }\n\n  ],\n\n  \"cargo:otherCharges:\": [\n\n    {\n\n      \"cargo:chargePaymentType\": \"{{Prepaid Payment Type}}\",\n\n      \"cargo:entitlement\": \"{{Due-Carrier}}\",\n\n      \"cargo:otherChargeCode\": \"MY\",\n\n      \"cargo:otherChargeAmount\": {\n\n        \"cargo:numericalValue\": \"267,75\",\n\n        \"cargo:currencyUnit\": \"EUR\"\n\n      }\n\n    },\n\n    {\n\n      \"cargo:chargePaymentType\": \"{{Prepaid Payment Type}}\",\n\n      \"cargo:entitlement\": \"{{Due-Carrier}}\",\n\n      \"cargo:otherChargeCode\": \"DG\",\n\n      \"cargo:otherChargeAmount\": {\n\n        \"cargo:numericalValue\": \"125,00\",\n\n        \"cargo:currencyUnit\": \"EUR\"\n\n      }\n\n    }\n\n  ],\n\n  \"cargo:accountingNote\": {\n\n    \"cargo:accountingNoteIdentifier\": \"{{GEN Accounting Identifier}}\",\n\n    \"cargo:accountingNoteText\": \"Express CargoYNZ\"\n\n  }\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/logistics-objects",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"logistics-objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ShipmentRecord",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP Status Code",
									"pm.test(\"ShipmentRecord exists\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate 'Revision' header is a positive numerical value",
									"pm.test(\"Revision header is a positive numerical value\", function () {",
									"    const revisionHeader = pm.response.headers.get('Revision');",
									"    pm.expect(revisionHeader).to.be.a('string');",
									"    const revisionNumber = Number(revisionHeader);",
									"    pm.expect(revisionNumber).to.be.a('number');",
									"    pm.expect(revisionNumber).to.be.above(0);",
									"});",
									"",
									"// Validate 'Latest-Revision' header is a positive numerical value",
									"pm.test(\"Latest-Revision header is a non-negative numerical value\", function () {",
									"    const latestRevisionHeader = pm.response.headers.get('Latest-Revision');",
									"    pm.expect(latestRevisionHeader).to.be.a('string');",
									"    const latestRevisionNumber = Number(latestRevisionHeader);",
									"    pm.expect(latestRevisionNumber).to.be.a('number');",
									"    pm.expect(latestRevisionNumber).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/logistics-objects/waybill-{{mawb-prefix}}-{{mawb-number}}?embedded=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"logistics-objects",
								"waybill-{{mawb-prefix}}-{{mawb-number}}"
							],
							"query": [
								{
									"key": "embedded",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change grossweight of Piece",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP Status Code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Validate response contains the 'Location' header\r",
									"pm.test(\"Response has 'Location' header\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									"// Extract 'Location' header and store it in an environment variable\r",
									"let locationHeader = pm.response.headers.get(\"Location\");\r",
									"pm.collectionVariables.set(\"actionRequest\", locationHeader);\r",
									"\r",
									"// Try both forward slash and backslash\r",
									"let partsForwardSlash = locationHeader.split('/');\r",
									"\r",
									"// Get the last non-empty element\r",
									"let actionID = '';\r",
									"\r",
									"// Try with forward slash first (more common in URLs)\r",
									"if (partsForwardSlash.length > 0) {\r",
									"    // Filter out empty strings and get the last element\r",
									"    let filtered = partsForwardSlash.filter(part => part.trim() !== '');\r",
									"    if (filtered.length > 0) {\r",
									"        actionID = filtered[filtered.length - 1];\r",
									"    }\r",
									"}\r",
									"\r",
									"// Set the actionID variable\r",
									"pm.collectionVariables.set(\"actionID\", actionID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"@context\": {\r\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\r\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\r\n    },\r\n    \"@type\": \"api:Change\",\r\n    \"api:hasLogisticsObject\": {\r\n        \"@id\": \"http://localhost:8080/logistics-objects/waybill-{{mawb-prefix}}-{{mawb-number}}\"\r\n    },\r\n        \"api:hasDescription\": \"Update totalGrossWeight\",\r\n    \"api:hasOperation\": [{\r\n            \r\n            \"@type\": \"api:Operation\",\r\n            \"api:op\": { \"@id\": \"api:DELETE\" },\r\n            \"api:s\": \"http://localhost:8080/logistics-objects/shipment-{{mawb-prefix}}-{{mawb-number}}\",\r\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#totalGrossWeight\",\r\n            \"api:o\": [{\r\n                \"@type\": \"api:OperationObject\",\r\n                \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#string\",\r\n                \"api:hasValue\": \"600\"\r\n            }]\r\n        },\r\n    {\r\n            \"@type\": \"api:Operation\",\r\n            \"api:op\": { \"@id\": \"api:ADD\" },\r\n            \"api:s\": \"http://localhost:8080/logistics-objects/shipment-{{mawb-prefix}}-{{mawb-number}}\",\r\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#totalGrossWeight\",\r\n            \"api:o\": [{\r\n                \"@type\": \"api:OperationObject\",\r\n                \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#string\",\r\n                \"api:hasValue\": \"1100\"\r\n            }]\r\n        }\r\n    ],\r\n    \"api:hasRevision\": {\r\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\r\n        \"@value\": \"1\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/logistics-objects/waybill-{{mawb-prefix}}-{{mawb-number}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"logistics-objects",
								"waybill-{{mawb-prefix}}-{{mawb-number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Action Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//NOTE: This test might fail as the action request must be in REQUEST_PENDING state.\r",
									"//Solution: Set param :actionRquestId to a REQUEST_PENDING action request \r",
									"//Test response code\r",
									"pm.test(\"Response Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json; version=2.0.0-dev",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/ld+json; version=2.0.0-dev",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/action-requests/:actionRequestId?status=REQUEST_ACCEPTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"action-requests",
								":actionRequestId"
							],
							"query": [
								{
									"key": "status",
									"value": "REQUEST_ACCEPTED"
								}
							],
							"variable": [
								{
									"key": "actionRequestId",
									"value": "{{actionID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Change request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Get the response body\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Convert the response to a string\r",
									"var responseBodyString = JSON.stringify(responseBody);\r",
									"var searchString = \"https://onerecord.iata.org/ns/api#REQUEST_ACCEPTED\";\r",
									"\r",
									"// Test that the response contains the expected string\r",
									"pm.test(\"Response contains REQUEST_ACCEPTED status\", function() {\r",
									"    pm.expect(responseBodyString.indexOf(searchString)).to.not.equal(-1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{actionRequest}}",
							"host": [
								"{{actionRequest}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Received Notification",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/internal/notifications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"internal",
								"notifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscription",
			"item": [
				{
					"name": "Subscribe to ShipmentRecord",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP Status Code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Validate response contains the 'Location' header\r",
									"pm.test(\"Response has 'Location' header\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"\r",
									"// Extract 'Location' header and store it in an environment variable\r",
									"let locationHeader = pm.response.headers.get(\"Location\");\r",
									"pm.collectionVariables.set(\"actionRequest2\", locationHeader);\r",
									"\r",
									"// Try both forward slash and backslash\r",
									"let partsForwardSlash = locationHeader.split('/');\r",
									"\r",
									"// Get the last non-empty element\r",
									"let actionID = '';\r",
									"\r",
									"// Try with forward slash first (more common in URLs)\r",
									"if (partsForwardSlash.length > 0) {\r",
									"    // Filter out empty strings and get the last element\r",
									"    let filtered = partsForwardSlash.filter(part => part.trim() !== '');\r",
									"    if (filtered.length > 0) {\r",
									"        actionID = filtered[filtered.length - 1];\r",
									"    }\r",
									"}\r",
									"\r",
									"// Set the actionID variable\r",
									"pm.collectionVariables.set(\"actionID2\", actionID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Get token using Client Credentials grant type",
									"pm.sendRequest({",
									"    url: \"http://localhost:8989\" + \"/realms/neone/protocol/openid-connect/token\",",
									"    method: \"POST\",",
									"    header: {",
									"        \"Accept\": \"application/json\",",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"",
									"    },",
									"    body: {",
									"        mode: \"urlencoded\",",
									"        urlencoded: [",
									"            { key: \"grant_type\", value: \"client_credentials\" },",
									"            { key: \"client_id\", value: \"neone-client\" },",
									"            { key: \"client_secret\", value: \"lx7ThS5aYggdsMm42BP3wMrVqKm9WpNY\" }",
									"        ]",
									"    }",
									"}, (err, res) => {",
									"    if (err) {",
									"        console.log(\"Token request failed:\", err);",
									"    } else {",
									"        // Set the access token",
									"        pm.collectionVariables.set(\"BEARERTOKEN\", res.json().access_token);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"@context\": {\r\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\r\n    \"api\": \"https://onerecord.iata.org/ns/api#\"\r\n  },\r\n  \"@type\": \"api:Subscription\",\r\n  \"api:hasContentType\": \"application/ld+json\",\r\n  \"api:hasSubscriber\": {\r\n    \"@id\": \"http://localhost:8081/logistics-objects/\"\r\n  },\r\n  \"api:hasTopicType\": {\r\n    \"@id\": \"api:LOGISTICS_OBJECT_TYPE\"\r\n  },\r\n  \"api:subscribeToLogisticsEvents\": {\r\n    \"@type\": \"http://www.w3.org/2001/XMLSchema#boolean\",\r\n    \"@value\": \"true\"\r\n  },\r\n  \"api:hasTopic\": {\r\n    \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\r\n    \"@value\": \"http://localhost:8080/logistics-objects/waybill-{{mawb-prefix}}-{{mawb-number}}\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/subscriptions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Action Request Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//NOTE: This test might fail as the action request must be in REQUEST_PENDING state.\r",
									"//Solution: Set param :actionRquestId to a REQUEST_PENDING action request \r",
									"//Test response code\r",
									"pm.test(\"Response Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json; version=2.0.0-dev",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/ld+json; version=2.0.0-dev",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/action-requests/:actionRequestId?status=REQUEST_ACCEPTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"action-requests",
								":actionRequestId"
							],
							"query": [
								{
									"key": "status",
									"value": "REQUEST_ACCEPTED"
								}
							],
							"variable": [
								{
									"key": "actionRequestId",
									"value": "{{actionID2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP Status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Get the response body\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Convert the response to a string\r",
									"var responseBodyString = JSON.stringify(responseBody);\r",
									"var searchString = \"https://onerecord.iata.org/ns/api#REQUEST_ACCEPTED\";\r",
									"\r",
									"// Test that the response contains the expected string\r",
									"pm.test(\"Response contains REQUEST_ACCEPTED status\", function() {\r",
									"    pm.expect(responseBodyString.indexOf(searchString)).to.not.equal(-1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{actionRequest2}}",
							"host": [
								"{{actionRequest2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verification request",
			"item": [
				{
					"name": "Create ShipmentRecord",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define a function to generate a random 8-digit number",
									"function generateRandomNumber() {",
									"    return Math.floor(10000000 + Math.random() * 90000000).toString();",
									"}",
									"",
									"// Set random MAWB number",
									"pm.collectionVariables.set(\"mawb-prefix\", \"020\");",
									"pm.collectionVariables.set(\"mawb-number\", generateRandomNumber());",
									"pm.collectionVariables.set(\"arrival-Location\", \"PVG\");",
									"pm.collectionVariables.set(\"departure-Location\", \"HAJ\");",
									"pm.collectionVariables.set(\"Consignor Company Name\", \"CompanyName\");",
									"pm.collectionVariables.set(\"Current Date\", \"2023-01-18T00:00:00\");",
									"pm.collectionVariables.set(\"Carrier City Name\", \"CityName1\");",
									"pm.collectionVariables.set(\"Shipment Gross Weight\", \"600\");",
									"pm.collectionVariables.set(\"Shipment Volume\", \"1\");",
									"pm.collectionVariables.set(\"Shipment goods description\", \"PARTS FOR GRAB ACCESSORIES NOT RESTRICTED\");",
									"pm.collectionVariables.set(\"Handling Instructions\", \"Marks: Address Att. docs: Commercial invoice References: AB67713\");",
									"pm.collectionVariables.set(\"Height-Piece1\", \"95\");",
									"pm.collectionVariables.set(\"Lenght-Piece1\", \"140\");",
									"pm.collectionVariables.set(\"Volume-Piece1\", \"1.20\");",
									"pm.collectionVariables.set(\"Width-Piece1\", \"90\");",
									"pm.collectionVariables.set(\"NvdForCarriageTrue\", \"True\");",
									"pm.collectionVariables.set(\"Prepaid Payment Type\", \"P\");",
									"pm.collectionVariables.set(\"Due-Carrier\", \"C\");",
									"pm.collectionVariables.set(\"GEN Accounting Identifier\", \"GEN\");",
									"pm.collectionVariables.set(\"iterationNumber\", \"000001\");",
									"pm.collectionVariables.set(\"customsCode\", \"X\");",
									"pm.collectionVariables.set(\"Due-Carrier\", \"C\");",
									"",
									"// Get token using Client Credentials grant type",
									"pm.sendRequest({",
									"    url: \"http://localhost:8989\" + \"/realms/neone/protocol/openid-connect/token\",",
									"    method: \"POST\",",
									"    header: {",
									"        \"Accept\": \"application/json\",",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"",
									"    },",
									"    body: {",
									"        mode: \"urlencoded\",",
									"        urlencoded: [",
									"            { key: \"grant_type\", value: \"client_credentials\" },",
									"            { key: \"client_id\", value: \"neone-client\" },",
									"            { key: \"client_secret\", value: \"lx7ThS5aYggdsMm42BP3wMrVqKm9WpNY\" }",
									"        ]",
									"    }",
									"}, (err, res) => {",
									"    if (err) {",
									"        console.log(\"Token request failed:\", err);",
									"    } else {",
									"        // Set the access token",
									"        pm.collectionVariables.set(\"BEARERTOKEN\", res.json().access_token);",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP Status Code",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Validate response contains the 'Location' header",
									"pm.test(\"Response has 'Location' header\", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"// Extract 'Location' header and store it in an environment variable",
									"let locationHeader = pm.response.headers.get(\"Location\");",
									"",
									"if (locationHeader) {",
									"    pm.collectionVariables.set(\"shipmentRecord\", locationHeader);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@id\": \"http://localhost:8080/logistics-objects/waybill-{{mawb-prefix}}-{{mawb-number}}\",\n    \"@type\": \"cargo:Waybill\",\n    \"cargo:waybillType\": {\n        \"@id\": \"https://onerecord.iata.org/ns/cargo#MASTER\"\n    },\n    \"cargo:waybillPrefix\": \"{{mawb-prefix}}\",\n    \"cargo:waybillNumber\": \"{{mawb-number}}\",\n    \"cargo:customsOriginCode\": \"{{customsCode}}\",\n    \"cargo:arrivalLocation\": \"{{arrival-Location}}\",\n    \"cargo:departureLocation\": \"{{departure-Location}}\",\n    \"cargo:consignorDeclarationSignature\": \"{{Consignor Company Name}}\",\n    \"cargo:carrierDeclarationDate\": \"{{Current Date}}\",\n    \"cargo:carrierDeclarationSignature\": \"PersonName1\",\n    \"cargo:carrierDeclarationPlace\": \"{{Carrier City Name}}\",\n    \"cargo:shipment\": [\n        {\n        \"@id\": \"http://localhost:8080/logistics-objects/shipment-{{mawb-prefix}}-{{mawb-number}}\",\n        \"@type\": \"cargo:Shipment\",\n        \"cargo:totalGrossWeight\": \"{{Shipment Gross Weight}}\",\n        \"cargo:totalDimension\": {\n            \"cargo:volume\": \"{{Shipment Volume}}\"\n        },\n        \"cargo:goodsDescription\": \"{{Shipment goods description}}\",\n        \"cargo:textualHandlingInstructions\": \"[[{{Handling Instructions}}]]\",\n        \"cargo:pieces\": [\n            {\n            \"@id\": \"http://localhost:8080/logistics-objects/pieces-{{mawb-prefix}}-{{mawb-number}}\",\n            \"@type\": \"cargo:Piece\",\n            \"cargo:dimension\": {\n                \"cargo:height\": \"{{Height-Piece1}}\",\n                \"cargo:lenght\": \"{{Lenght-Piece1}}\",\n                \"cargo:width\": \"{{Width-Piece1}}\",\n                \"cargo:volume\": \"{{Volume-Piece1}}\"\n            },\n            \"cargo:grossWeight\": \"600\",\n            \"cargo:volumetricWeight\": {\n                \"cargo:chargeableWeight\": \"600\"\n            },\n            \"cargo:ndvForCarriage\": \"{{NvdForCarriageTrue}}\",\n            \"cargo:nvdForCustoms\": \"{{NvdForCustomsTrue}}\"\n            }\n        ],\n        \"cargo:customsInformation\": [\n            {\n            \"cargo:contentCode\": \"CP\",\n            \"cargo:subjectCode\": \"CNE\",\n            \"cargo:country\": \"CN\",\n            \"cargo:otherCustomsInformation\": \"PersonName2\"\n            }\n        ]\n        }\n    ],\n    \"cargo:otherCharges:\": [\n        {\n        \"cargo:chargePaymentType\": \"{{Prepaid Payment Type}}\",\n        \"cargo:entitlement\": \"{{Due-Carrier}}\",\n        \"cargo:otherChargeCode\": \"MY\",\n        \"cargo:otherChargeAmount\": {\n            \"cargo:numericalValue\": \"267,75\",\n            \"cargo:currencyUnit\": \"EUR\"\n        }\n        },\n        {\n        \"cargo:chargePaymentType\": \"{{Prepaid Payment Type}}\",\n        \"cargo:entitlement\": \"{{Due-Carrier}}\",\n        \"cargo:otherChargeCode\": \"DG\",\n        \"cargo:otherChargeAmount\": {\n            \"cargo:numericalValue\": \"125,00\",\n            \"cargo:currencyUnit\": \"EUR\"\n        }\n        }\n    ],\n    \"cargo:accountingNote\": {\n        \"cargo:accountingNoteIdentifier\": \"{{GEN Accounting Identifier}}\",\n        \"cargo:accountingNoteText\": \"Express CargoYNZ\"\n    }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/logistics-objects",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"logistics-objects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ShipmentRecord",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP Status Code",
									"pm.test(\"ShipmentRecord exists\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate 'Revision' header is a positive numerical value",
									"pm.test(\"Revision header is a positive numerical value\", function () {",
									"    const revisionHeader = pm.response.headers.get('Revision');",
									"    pm.expect(revisionHeader).to.be.a('string');",
									"    const revisionNumber = Number(revisionHeader);",
									"    pm.expect(revisionNumber).to.be.a('number');",
									"    pm.expect(revisionNumber).to.be.above(0);",
									"});",
									"",
									"// Validate 'Latest-Revision' header is a positive numerical value",
									"pm.test(\"Latest-Revision header is a non-negative numerical value\", function () {",
									"    const latestRevisionHeader = pm.response.headers.get('Latest-Revision');",
									"    pm.expect(latestRevisionHeader).to.be.a('string');",
									"    const latestRevisionNumber = Number(latestRevisionHeader);",
									"    pm.expect(latestRevisionNumber).to.be.a('number');",
									"    pm.expect(latestRevisionNumber).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/logistics-objects/waybill-{{mawb-prefix}}-{{mawb-number}}?embedded=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"logistics-objects",
								"waybill-{{mawb-prefix}}-{{mawb-number}}"
							],
							"query": [
								{
									"key": "embedded",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verification request goodsDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP Status Code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Validate response contains the 'Location' header\r",
									"pm.test(\"Response has 'Location' header\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARERTOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"@context\": {\r\n        \"cargo\": \"https: //onerecord.iata.org/ns/cargo#\",\r\n        \"api\": \"https: //onerecord.iata.org/ns/api#\",\r\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema\"\r\n    },\r\n    \"@type\": \"api:Verification\",\r\n    \"api:hasLogisticsObject\": {\r\n        \"@id\": \"http://localhost:8080/logistics-objects/waybill-{{mawb-prefix}}-{{mawb-number}}\"\r\n    },\r\n    \"api:hasError\": [{\r\n            \"@type\": \"api:Error\",\r\n            \"api:hasTitle\": \"Generic goodsDescription. Please use a descriptive goodsDescription for customs checks\",\r\n            \"api:hasErrorDetail\": {\r\n                \"@type\": \"api:ErrorDetail\",\r\n                \"api:hasProperty\": {\r\n                    \"@value\": \"https: //onerecord.iata.org/ns/cargo#goodsDescription\",\r\n                    \"@type\": \"xsd:anyURI\"\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"api:hasRevision\": {\r\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\r\n        \"@value\": \"1\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/logistics-objects/waybill-{{mawb-prefix}}-{{mawb-number}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"logistics-objects",
								"waybill-{{mawb-prefix}}-{{mawb-number}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "tokenName",
				"value": "ne-one-simulate-token",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mawb-prefix",
			"value": ""
		},
		{
			"key": "mawb-number",
			"value": ""
		},
		{
			"key": "BEARERTOKEN",
			"value": ""
		},
		{
			"key": "shipmentRecord",
			"value": ""
		},
		{
			"key": "arrival-Location",
			"value": ""
		},
		{
			"key": "departure-Location",
			"value": ""
		},
		{
			"key": "Consignor Company Name",
			"value": ""
		},
		{
			"key": "Current Date",
			"value": ""
		},
		{
			"key": "Carrier City Name",
			"value": ""
		},
		{
			"key": "Shipment Gross Weight",
			"value": ""
		},
		{
			"key": "Shipment Volume",
			"value": ""
		},
		{
			"key": "Shipment goods description",
			"value": ""
		},
		{
			"key": "Handling Instructions",
			"value": ""
		},
		{
			"key": "Height-Piece1",
			"value": ""
		},
		{
			"key": "Lenght-Piece1",
			"value": ""
		},
		{
			"key": "Volume-Piece1",
			"value": ""
		},
		{
			"key": "Width-Piece1",
			"value": ""
		},
		{
			"key": "NvdForCarriageTrue",
			"value": ""
		},
		{
			"key": "Prepaid Payment Type",
			"value": ""
		},
		{
			"key": "Due-Carrier",
			"value": ""
		},
		{
			"key": "GEN Accounting Identifier",
			"value": ""
		},
		{
			"key": "iterationNumber",
			"value": ""
		},
		{
			"key": "customsCode",
			"value": ""
		},
		{
			"key": "actionRequest",
			"value": ""
		},
		{
			"key": "actionID",
			"value": ""
		},
		{
			"key": "actionRequest2",
			"value": ""
		},
		{
			"key": "actionID2",
			"value": ""
		}
	]
}